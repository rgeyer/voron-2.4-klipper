############################################# \
######## USER CONFIG OVERRIDES FILE #########  + --> This will help you personalize my config to your printer :)
############################################# /

# This file is yours! Feel free to edit it in order to include all the needed
# things to adapt my generic config to your machine. This file will not be erased
# when updating the config using moonraker and it will be kept as you've set it.
# You can change every section of the config. You can also add some new custom macros, etc...
# The corresponding documentation can be found in: docs > overrides.md

### Also, keep in mind: if you use a multi-MCU config such as the old school double SKRs or a CANbus toolhead
### board, you will need to specify which components are connected to which board in your own mcu.cfg file!
### Example: if something is connected to the toolhead MCU, you should use "config_pin: toolhead:PIN_NAME".

#> Main control MCUs are called "mcu" (and "secondary" when using a double MCU configuration)
#> Toolhead CANboard MCUs are called "toolhead"
#> MMU/ERCF MCUs are called "mmu" 

# ------------------------------------------------------------------------------------------


#-------------------------#
#   START_PRINT SEQUENCE  #
#-------------------------#

## The START_PRINT sequence is modular and fully customizable. A default START_PRINT sequence is auto-populated based on
## your probe choice (TAP, Dockable, Inductive), but if for some reasons you still want to modify it, please uncomment the following 3
## lines to define a new `variable_startprint_actions`. You can use any number of action or even duplicate some actions if needed.
## Available actions: "bed_soak", "extruder_preheating", "chamber_soak", "extruder_heating", "tilt_calib", "z_offset", "bedmesh", "purge", "clean", "primeline"
##
# [gcode_macro _USER_VARIABLES]
# variable_startprint_actions: "action1", "action2", ...
# gcode: # do not remove this line


#-------------------------#
#   EXTRUDER/BED PIDs     #
#-------------------------#

## Here is an example of some overrides for the PIDs. I put them here as almost everyone will use them,
## so just uncomment the following lines and change the values according to your own machine
[extruder]
rotation_distance: 17.776
sensor_type: ATC Semitec 104NT-4-R025H42G
max_temp: 290
control: pid
# Mosquito 50W 104NT, 260C, 40% part fan
pid_Kp:24.017
pid_Ki:1.261
pid_Kd:114.383

# pid_Kp:21.887 
# pid_Ki:1.140
# pid_Kd:105.056

# pid_Kp:21.270
# pid_Ki:1.668
# pid_Kd:67.800

[heater_bed]
control: pid
pid_kp: 68.127
pid_ki: 2.153
pid_kd: 539.055


#-------------------------#
#   Z MOTORS DIRECTION    #
#-------------------------#

## Here is an example of some overrides for the motor directions as it's a pretty common one. If you need
## to invert the Z1 or Z3 motor direction on your machine, just uncomment the following lines.
[stepper_z]
dir_pin: !Z_DIR

[stepper_z2]
dir_pin: !Z2_DIR


# XY are both reversed
[stepper_x]
dir_pin: !X_DIR

[stepper_y]
dir_pin: !Y_DIR
position_max: 312
position_endstop: 312


#-------------------------#
#   Probe Offsets         #
#-------------------------#

## Here is an example of some overrides for bed probes. These frequently have calibrated offsets for xyz,
## and many will need them during setup. If you need to set these, just uncomment the following lines.
[probe]
z_offset: -0.340

[controller_fan controller_fan]
pin=multi_pin:controller_fans
kick_start_time: 0.5
fan_speed: 1.0
idle_timeout: 60

[bed_mesh]
horizontal_move_z: 5
# mesh_min: 25, 50
probe_count: 5, 5

[neopixel status_leds]
color_order: GRB
#   Set the pixel order required by the LED hardware. Options are GRB,
#   RGB, GRBW, or RGBW. The default is GRB.
initial_RED: 0.43
initial_GREEN: 0.16
initial_BLUE: 1.0

[gcode_macro _USER_VARIABLES]
variable_startprint_actions: "bed_soak", "extruder_preheating", "chamber_soak", "clean", "tilt_calib", "z_offset", "bedmesh", "extruder_heating", "clean", "primeline"

variable_status_leds_logo_idx: '2'
variable_status_leds_nozzle_idx: '1,3'
gcode:

[input_shaper]
shaper_freq_x: 67.2
shaper_type_x: mzv
shaper_freq_y: 45.4
shaper_type_y: zv

[filament_switch_sensor runout_sensor]
switch_pin: ^toolhead:PB8
runout_gcode:
  SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours

[gcode_macro RESUME]
rename_existing: KLIPPAIN_RESUME
description: Just set the idle timeout back to normal and run the original macro
gcode:
  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
  KLIPPAIN_RESUME

[shaketune]
# result_folder: ~/printer_data/config/ShakeTune_results
#    The folder where the results will be stored. It will be created if it doesn't exist.
# number_of_results_to_keep: 3
#    The number of results to keep in the result_folder. The oldest results will
#    be automatically deleted after each runs.
# keep_raw_csv: False
#    If True, the raw CSV files will be kept in the result_folder alongside the
#    PNG graphs. If False, they will be deleted and only the graphs will be kept.
# show_macros_in_webui: True
#    Mainsail and Fluidd doesn't create buttons for "system" macros that are not in the
#    printer.cfg file. If you want to see the macros in the webui, set this to True.
# timeout: 300
#    The maximum time in seconds to let Shake&Tune process the CSV files and generate the graphs.

[gcode_macro loop_test_speed_fast]
variable_count: 1
gcode:
  {% set count = params.COUNT|default(1)|int %}
  {% for i in range(count) %}
  test_speed_fast
  {%endfor %}

[gcode_macro test_speed_fast]
gcode:
  # 8,0;292,298
  G28 x y
  GET_POSITION
  G1 X8 Y8     F27000
  G1 X292 Y292 F27000
  G1 X8 Y8     F27000
  G1 X292 Y292 F27000

  G1 X8 Y292 F36000

  G1 X292 Y8 F27000
  G1 X8 Y292 F27000
  G1 X292 Y8 F27000
  G1 X8 Y292 F27000

  G1 X8 Y8 F36000
  G1 X292 Y8 F36000
  G1 X292 Y292 F36000
  G1 X8 Y292 F36000
  G1 X8 Y8 F36000
  G1 X8 Y100
  G28 x y
  GET_POSITION